(set-logic HORN)
(set-info :source |
  Benchmark: benchmark/inputs/ml/mochi_test_web/r-file.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_64[0:0]| ( Int) Bool)
(declare-fun |read_[0:2][0:0]| ( Bool  Int  Int) Bool)
(declare-fun |read_[0:1]| ( Bool  Int) Bool)
(declare-fun |f[0:2]| ( Bool  Bool  Int) Bool)
(declare-fun |g[0:2]| ( Int  Bool  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_64[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|read_[0:1]| true x1) (and (not (= x1 1)) (not (= x1 3)))) (|fail_64[0:0]| x0))))
(assert (forall ((x4 Bool)(x5 Int)(x3 Bool)(x0 Int)) (=> (and (|read_[0:2][0:0]| x3 x0 x5) (|f[0:2]| x3 x4 x0)) (|read_[0:1]| x4 x5))))
(assert (forall ((x1 Bool)(x2 Int)(x0 Int)) (=> (and (|read_[0:1]| x1 x2) (and (= x0 x2) (not x1))) (|read_[0:2][0:0]| x1 x2 x0))))
(assert (forall ((x2 Bool)(x0 Int)(x3 Bool)) (=> (|f[0:2]| x2 x3 x0) (|read_[0:1]| x2 x0))))
(assert (forall ((x3 Bool)(x0 Bool)(x4 Int)(x1 Int)(x2 Int)) (=> (and (|g[0:2]| x1 x3 x2) (and (= x4 3) (and (>= x1 1) (and (not (= x2 0)) x0)))) (|f[0:2]| x3 x0 x4))))
(assert (forall ((x3 Int)(x1 Bool)(x0 Int)) (=> (and (= x0 1) x1) (|g[0:2]| x3 x1 x0))))
(check-sat)
(get-model)
(exit)
