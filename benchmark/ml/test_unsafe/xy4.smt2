(set-logic HORN)
(set-info :source |
  Benchmark: /home/katsura/hflmc2/benchmark/ml/test_unsafe/xy4.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_11[0:0]| ( Int) Bool)
(declare-fun |loopb[0:1]| ( Int  Int) Bool)
(declare-fun |loopa[0:2][0:0]| ( Int  Int  Int) Bool)
(declare-fun |loopa[0:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_11[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|loopb[0:1]| x1 x2) (and (<= x1 0) (<= (+ 1 x2) 0))) (|fail_11[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopb[0:1]| x2 x3) (and (= (+ 4 x0) x2) (and (= (+ 1 x1) x3) (>= x2 1)))) (|loopb[0:1]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopb[0:1]| x2 x3) (and (= (+ 4 x0) x2) (and (= (+ 1 x1) x3) (>= x2 1)))) (|loopb[0:1]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopb[0:1]| x2 x3) (and (= (+ 4 x0) x2) (and (= (+ 1 x1) x3) (>= x2 1)))) (|loopb[0:1]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|loopa[0:2][0:0]| 0 0 x1) (= (+ 1 x0) 0)) (|loopb[0:1]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x0 x1) (and (|loopa[0:2][0:0]| x2 x3 x4) (and (<= x1 3) (and (= x2 (+ 4 x0)) (= x3 (+ 1 x1)))))) (|loopa[0:2][0:0]| x0 x1 x4))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x0 x1) (and (|loopa[0:2][0:0]| x2 x3 x4) (and (<= x1 3) (and (= x2 (+ 4 x0)) (= x3 (+ 1 x1)))))) (|loopa[0:2][0:0]| x0 x1 x4))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x0 x1) (and (|loopa[0:2][0:0]| x2 x3 x4) (and (<= x1 3) (and (= x2 (+ 4 x0)) (= x3 (+ 1 x1)))))) (|loopa[0:2][0:0]| x0 x1 x4))))
(assert (forall ((x0 Int)(x1 Int)(x4 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x0 x1) (and (|loopa[0:2][0:0]| x2 x3 x4) (and (<= x1 3) (and (= x2 (+ 4 x0)) (= x3 (+ 1 x1)))))) (|loopa[0:2][0:0]| x0 x1 x4))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|loopa[0:1]| x1 x2) (and (>= x2 4) (= x0 x1))) (|loopa[0:2][0:0]| x1 x2 x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x2 x3) (and (= x0 (+ 4 x2)) (and (= x1 (+ 1 x3)) (<= x3 3)))) (|loopa[0:1]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x2 x3) (and (= x0 (+ 4 x2)) (and (= x1 (+ 1 x3)) (<= x3 3)))) (|loopa[0:1]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x2 x3) (and (= x0 (+ 4 x2)) (and (= x1 (+ 1 x3)) (<= x3 3)))) (|loopa[0:1]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|loopa[0:1]| x2 x3) (and (= x0 (+ 4 x2)) (and (= x1 (+ 1 x3)) (<= x3 3)))) (|loopa[0:1]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (= x0 0) (= x1 0)) (|loopa[0:1]| x0 x1))))
(check-sat)
(get-model)
(exit)
