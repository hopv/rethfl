%HES
MAIN  =v
  (arg1 <= 0 \/ arg3 <= 0)
  \/ LOOPSHIFT arg3 arg1
      (\i_20.\k_make_array.((0 > i_20 \/ i_20 >= arg3) \/ k_make_array arg4) /\ (0 <= i_20 /\ i_20 < arg3)) (-1) 1
      (\i_20.\k_make_array.((0 > i_20 \/ i_20 >= arg3) \/ k_make_array (-1)) /\ (0 <= i_20 /\ i_20 < arg3))
      (\shiftArray3.
        LOOP arg3 arg1
         (\i_20.\k_make_array.((0 > i_20 \/ i_20 >= arg3) \/ k_make_array arg4) /\ (0 <= i_20 /\ i_20 < arg3))
         shiftArray3
         (\i_20.\k_make_array.((0 > i_20 \/ i_20 >= arg1) \/ k_make_array arg2) /\ (0 <= i_20 /\ i_20 < arg1)) 0 0
         (\u.true)).
LOOPSHIFT plen slen pat i j_16 shiftArray1 k_kmpMatch_loopShift =v
  (j_16 != plen \/ k_kmpMatch_loopShift shiftArray1)
  /\ (j_16 = plen
      \/ pat j_16
          (\x_15.
            pat (i + 1)
             (\x_14.
               (x_15 = x_14
                \/ (i < 0 \/ shiftArray1 i (\x_13.LOOPSHIFT plen slen pat x_13 j_16 shiftArray1 k_kmpMatch_loopShift))
                   /\ (i >= 0 \/ LOOPSHIFT plen slen pat (-1) (j_16 + 1) shiftArray1 k_kmpMatch_loopShift))
               /\ (x_15 != x_14
                   \/ (i + 1 >= j_16
                       \/ shiftArray1 j_16
                           (\u_11.
                             shiftArray1 j_16
                              (\x_10.
                                LOOPSHIFT plen slen pat x_10 (j_16 + 1) (\j.\k_update.k_update (j + 1))
                                 k_kmpMatch_loopShift)))
                      /\ (i + 1 < j_16
                          \/ shiftArray1 j_16
                              (\x_10.LOOPSHIFT plen slen pat x_10 (j_16 + 1) shiftArray1 k_kmpMatch_loopShift)))))).
LOOP plen slen pat shiftArray3 str s p k_kmpMatch_loop =v
  (p >= plen
   \/ (s >= slen
       \/ str s
           (\x_9.
             pat p
              (\x_8.
                (x_9 != x_8 \/ LOOP plen slen pat shiftArray3 str (s + 1) (p + 1) k_kmpMatch_loop)
                /\ (x_9 = x_8
                    \/ (p != 0 \/ LOOP plen slen pat shiftArray3 str (s + 1) p k_kmpMatch_loop)
                       /\ (p = 0
                           \/ shiftArray3 (p - 1) (\x.LOOP plen slen pat shiftArray3 str s (x + 1) k_kmpMatch_loop))))))
      /\ (s < slen \/ k_kmpMatch_loop 0))
  /\ (p < plen \/ k_kmpMatch_loop (s - plen)).
Forall p      =v ForallAux p 0.
ForallAux p x =v p x /\ p (0-x) /\ ForallAux p (x+1).
Exists p      =v ExistsAux 1000 p.
ExistsAux x p =v x > 0 /\ (p x \/ p (0-x) \/ ExistsAux (x-1) p).
