%HES
MAIN  =v
  MAKE_INTLIST arg1 true
   (\arg20.
     \arg21.
      DIVIDE arg1 arg20 arg21
       (\r_divide00.
         \r_divide01.
          \r_divide10.
           \r_divide11.
            LENGTH arg20 arg21
             (\x_5.
               LENGTH r_divide00 r_divide01
                (\x_4.
                  (x_5 < x_4 \/ LENGTH arg20 arg21 (\x_3.LENGTH r_divide10 r_divide11 (\x_2.x_3 >= x_2))) /\ x_5 >= x_4)))).
LENGTH x0 x1 k_length =v
  (x0 > 0 \/ k_length 0)
  /\ (x0 <= 0 \/ (x0 <= 0 \/ LENGTH (x0 - 1) (\x_30.\k_length_l.x1 (x_30 + 1) k_length_l) (\x_31.k_length (1 + x_31)))).
DIVIDE x_29 l0 l1 k_divide_28 =v
  (l0 > 0 \/ k_divide_28 0 (\x_25.\k_divide_24.true) 0 (\x_27.\k_divide_26.true))
  /\ (l0 <= 0
      \/ (l0 <= 0
          \/ l1 0
              (\y.
                DIVIDE x_29 (l0 - 1) (\x_16.\k_divide_l_.l1 (x_16 + 1) k_divide_l_)
                 (\r_divide00_23.
                   \r_divide01_22.
                    \r_divide10_21.
                     \r_divide11_20.
                      (x_29 > y
                       \/ k_divide_28 (1 + r_divide00_23) (\i_19.\k_divide_18.k_divide_18 0) r_divide10_21
                           r_divide11_20)
                      /\ (x_29 <= y
                          \/ k_divide_28 r_divide00_23 r_divide01_22 (1 + r_divide10_21) (\i_17.\k_divide.k_divide 0)))))).
MAKE_INTLIST arg1 x_13 k_main_arg2_make_intlist_12 =v
  Forall
   (\x_11.
     (x_11 != 0 \/ k_main_arg2_make_intlist_12 0 (\x_10.\k_main_arg2_make_intlist_9.true))
     /\ (x_11 = 0
         \/ Forall
             (\n.
               MAKE_INTLIST arg1 true
                (\p0_7.
                  \p1_6.
                   k_main_arg2_make_intlist_12 (1 + p0_7)
                    (\i.
                      \k_main_arg2_make_intlist.
                       (i != 0 \/ k_main_arg2_make_intlist n)
                       /\ (i = 0 \/ MAKE_INTLIST arg1 true (\p0.\p1.p1 (i - 1) k_main_arg2_make_intlist))))))).
Forall p      =v ForallAux p 0.
ForallAux p x =v p x /\ p (0-x) /\ ForallAux p (x+1).
Exists p      =v ExistsAux 1000 p.
ExistsAux x p =v x > 0 /\ (p x \/ p (0-x) \/ ExistsAux (x-1) p).
