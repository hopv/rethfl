%HES
MAIN  =v MAKE_LIST arg2 (\x0.\x1.ASSERT_BOUNDED arg2 x0 x1 (\main.true)).
ASSERT_BOUNDED x_13 x0_12 x1_11 k_assert_bounded =v
  (x0_12 > 0 \/ k_assert_bounded true)
  /\ (x0_12 <= 0
      \/ (x0_12 <= 0
          \/ x1_11 0
              (\y.
                (x_13 < y
                 \/ ASSERT_BOUNDED x_13 (x0_12 - 1) (\x_8.\k_assert_bounded_l.x1_11 (x_8 + 1) k_assert_bounded_l)
                     k_assert_bounded)
                /\ x_13 >= y))).
MAKE_LIST n k_make_list_7 =v
  (n > 0 \/ k_make_list_7 0 (\x.\k_make_list_6.true))
  /\ (n <= 0
      \/ MAKE_LIST (n - 1)
          (\p0_5.
            \p1_4.
             k_make_list_7 (1 + p0_5)
              (\i.
                \k_make_list.(i != 0 \/ k_make_list n) /\ (i = 0 \/ MAKE_LIST (n - 1) (\p0.\p1.p1 (i - 1) k_make_list))))).
Forall p      =v ForallAux p 0.
ForallAux p x =v p x /\ p (0-x) /\ ForallAux p (x+1).
Exists p      =v ExistsAux 1000 p.
ExistsAux x p =v x > 0 /\ (p x \/ p (0-x) \/ ExistsAux (x-1) p).
