%HES
MAIN  =v
  MAKE_LIST arg1
   (\xs0.
     \xs1.
      FOLD_RIGHT (\f_7.\g.\x_6.\k_compose.g x_6 (\x_5.f_7 x_5 k_compose)) xs0 xs1 (\x.\k_main_f.k_main_f x)
       (\f.f 0 (\x_2.x_2 >= 0))).
MAKE_LIST n k_make_list_19 =v
  (n > 0 \/ k_make_list_19 0 (\x_18.\k_make_list_17.true))
  /\ (n <= 0
      \/ MAKE_LIST (n - 1)
          (\p0_15.
            \p1_14.
             k_make_list_19 (1 + p0_15)
              (\i.
                \k_make_list.
                 (i != 0 \/ k_make_list (\m.\k_make_list_f.k_make_list_f (n + m)))
                 /\ (i = 0 \/ MAKE_LIST (n - 1) (\p0.\p1.p1 (i - 1) k_make_list))))).
FOLD_RIGHT f_13 xs0_12 xs1_11 init k_fold_right =v
  (xs0_12 > 0 \/ k_fold_right init)
  /\ (xs0_12 <= 0
      \/ (xs0_12 <= 0
          \/ xs1_11 0
              (\x_10.
                FOLD_RIGHT f_13 (xs0_12 - 1) (\x_8.\k_fold_right_xs_.xs1_11 (x_8 + 1) k_fold_right_xs_) init
                 (\x_9.k_fold_right (f_13 x_10 x_9))))).
Forall p      =v ForallAux p 0.
ForallAux p x =v p x /\ p (0-x) /\ ForallAux p (x+1).
Exists p      =v ExistsAux 1000 p.
ExistsAux x p =v x > 0 /\ (p x \/ p (0-x) \/ ExistsAux (x-1) p).
